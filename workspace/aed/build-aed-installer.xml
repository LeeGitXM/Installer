<!-- Create an application installer for the Exxon-Mobil EMRE
     "AED-RTA" package. This file assembles artifacts
     to create a specialized installer.
     
     We require that GIT_REPO and SVN_REPO be provided to this script.
-->
<project name="AEDInstaller" basedir="." default="deploy">
	<property name="build.dir" value="${basedir}/../AI-build" />
	<property name="staging.dir" value="${basedir}/staging" />
	<property name="artifact.dir" value="${staging.dir}/artifacts" />
	<property name="deploy.dir" value="${basedir}/modules" />
	<property name="bom" value="${basedir}/bom.xml" />
	<property name="module.name" value="aed-installer" />
	<property name="module.path" value="${basedir}/modules" />
	<property name="module.xml" value="${basedir}/aed-installer-module.xml" />
	<property name="local.gateway.url" value="http://localhost:8088/main/system/DeveloperModuleLoadingServlet" />

	<!-- Add the postmodule task. This task can deploy a module to a local Ignition gateway. -->
	<taskdef name="postmodule" classname="com.inductiveautomation.ant.PostModule">
		<classpath location="${build.dir}/AntLib/ant-post-module.jar" />
	</taskdef>
	
	<!-- Generic SignModule: Reference Via Antcalls -->
	<target name="SignModule">
		<echo message="Signing ${moduleName}" />
		<java jar="${git.repo}/external/lib/module-signer.jar"  fork="true">
			<arg value="-keystore=${git.repo}/tools/keys/ILSA-keystore"/>
			<arg value="-keystore-pwd=ILS-Automation"/>
			<arg value="-alias=ILSAutomationKey"/>
			<arg value="-alias-pwd=chromsmart" />
			<arg value="-chain=${git.repo}/tools/keys/ilsautomationcertificate.p7b"/>
			<arg value="-module-in=${modulein}"/>
			<arg value="-module-out=${moduleout}"/>
		</java>
	</target>

	<!-- Clean results of previous runs -->
	<target name="clean" description="Remove existing archive">
		<delete dir="${staging.dir}" />
		<delete dir="${module.path}" />
	</target>

	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="clean" description="Assemble the installer">

		<!-- build.date and version.build are both in SVN Release area, in
		    files VERS and DATE.
		    Update the BOM. "loadfile" does not overwrite existing properties.
		-->
		<loadfile property="rawdate" srcFile="${svn.repo}/EMRE/Release/DATE"/>
		<trim input="${rawdate}" property="build.date" />
		<loadfile property="rawvers" srcFile="${svn.repo}/EMRE/Release/VERS"/>
		<trim input="${rawvers}" property="version.build"/>
		<echo message="Build date: ${build.date}" />
		<echo message="Build version: ${version.build}" />

		<!-- Create directories -->
		<echo message="Making ${module.name} modl" />
		<mkdir dir="${staging.dir}" />
		<mkdir dir="${artifact.dir}" />
		<mkdir dir="${deploy.dir}" />

		<!-- Create module.xml and  marker file -->
		<copy file="${module.xml}" tofile="${staging.dir}/module.xml" overwrite="true" />
		<echo message="${build.date}" file="${staging.dir}/.application-installer" append="false" />

		<!-- Copy Core jar files -->
		<copy file="${git.repo}/external/lib/ils-common.jar" todir="${staging.dir}/" />
		<copy file="${build.dir}/temp_modl/ai-gateway.jar" todir="${staging.dir}/" />

		<!-- Copy staged artifacts into the bundle. Update release and build date -->
		<mkdir dir="${artifact.dir}" />
		<copy file="${bom}" tofile="${artifact.dir}/bom.xml" overwrite="true" />
		<replace file="${artifact.dir}/bom.xml" token="@DATE@" value="${build.date}" />
		<replace file="${artifact.dir}/bom.xml" token="@RELEASE@" value="${version.build}" />

		<!-- Database -->
		<mkdir dir="${artifact.dir}/database" />
		<copy file="${svn.repo}/EMRE/Database/createAED.sql" tofile="${artifact.dir}/database/createAED.sql" />
		<copy file="${svn.repo}/EMRE/Database/clearAED.sql" tofile="${artifact.dir}/database/clearAED.sql" />
		<!--
		<copy file="${svn.repo}/EMRE/Database/alterAED.sql" tofile="${artifact.dir}/database/alterAED.sql" />
		<copy file="${svn.repo}/EMRE/Database/insertData.sql" tofile="${artifact.dir}/database/insertAED.sql" />
		<copy file="${svn.repo}/EMChemicals/Logging/create_log_table.sql" tofile="${artifact.dir}/database/createLogging.sql" />
		-->
		
		<!-- Documentation -->
		<mkdir dir="${artifact.dir}/doc" />
		<copy file="${svn.repo}/EMRE/Release/Release Notes.pdf" tofile="${artifact.dir}/doc/ReleaseNotes.pdf" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AED 6.0 Design Specification.docx" tofile="${artifact.dir}/doc/AedRtaDesignSpecification.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/SLED/SLED-DesignSpecification.docx" tofile="${artifact.dir}/doc/SLEDDesignSpecification.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AED 7.0 DB Design Changes.docx" tofile="${artifact.dir}/doc/AedRtaDatabaseDesignChanges.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AEDModuleProgrammersGuide.docx" tofile="${artifact.dir}/doc/AEDModuleProgrammersGuide.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AEDInstallationManual.docx" tofile="${artifact.dir}/doc/AEDInstallationManual.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AED-HistoryExpressionOptimization.docx" tofile="${artifact.dir}/doc/AEDHistoryExpressionOptimization.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Design/AED-RTA Functions Guide.docx" tofile="${artifact.dir}/doc/AEDFunctionsGuide.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - Common Facilities User Interface.docx" tofile="${artifact.dir}/doc/CommonFacilitiesUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - PCA User Interface.docx" tofile="${artifact.dir}/doc/PCAUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - PID Performance.docx" tofile="${artifact.dir}/doc/PIDPerformance.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - PID User Interface.docx" tofile="${artifact.dir}/doc/PIDUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - Rule Performance.docx" tofile="${artifact.dir}/doc/RulePerformance.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - Rule User Interface.docx" tofile="${artifact.dir}/doc/RuleUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - Tag User Interface.docx" tofile="${artifact.dir}/doc/TagUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - VFM Performance.docx" tofile="${artifact.dir}/doc/VFMPerformance.docx" />
		<copy file="${svn.repo}/EMRE/Documentation/Test/AED v6.0 Functional Test Specification - VFM User Interface.docx" tofile="${artifact.dir}/doc/VFMUserInterface.docx" />
		<copy file="${svn.repo}/EMRE/Release/Release Build Manual.docx" tofile="${artifact.dir}/doc/ReleaseBuildManual.docx" />
		<copy file="${svn.repo}/EMChemicals/Logging/Documentation/Logging User's and Design Guide.pdf" tofile="${artifact.dir}/doc/LoggingUserGuide.pdf" />

		<!-- External -->
		<mkdir dir="${artifact.dir}/external/ils-python" />
		<copy todir="${artifact.dir}/external/ils-python">
			<fileset dir="${git.repo}/ils-python/ILS_Python/src">
				<include name="ils/common/**/*.py" />
				<include name="ils/dataset/**/*.py" />
				<include name="ils/log/**/*.py" />
				<include name="ils/logging/**/*.py" />
			</fileset>
		</copy>
		<mkdir dir="${artifact.dir}/external/xom-python" />
		<copy todir="${artifact.dir}/external/xom-python">
			<fileset dir="${git.repo}/xom-python/XOM_Python/src/xom">
				<include name="emre/**/*.py" />
				<include name="__init__.py" />
			</fileset>
		</copy>
		<!-- External jars - needed for the simulator -->
		<mkdir dir="${artifact.dir}/external/jars/core/common" />
		<copy file="${git.repo}/external/lib/commons-codec-1.9.jar" tofile="${artifact.dir}/external/jars/core/common/commons-codec-1.9.jar" />
		<copy file="${git.repo}/external/lib/commons-math3-3.6.1.jar" tofile="${artifact.dir}/external/jars/core/common/commons-math3-3.6.1.jar" />
		<copy file="${git.repo}/external/lib/jackson-annotations-2.2.3.jar" tofile="${artifact.dir}/external/jars/core/common/jackson-annotations-2.2.3.jar" />
		<copy file="${git.repo}/external/lib/jackson-core-2.2.3.jar" tofile="${artifact.dir}/external/jars/core/common/jackson-core-2.2.3.jar" />
		<copy file="${git.repo}/external/lib/jackson-databind-2.2.3.jar" tofile="${artifact.dir}/external/jars/core/common/jackson-databind-2.2.3.jar" />
		<copy file="${git.repo}/external/lib/poi-3.13.jar" tofile="${artifact.dir}/external/jars/core/common/poi-3.13.jar" />
		<copy file="${git.repo}/external/lib/poi-ooxml-3.13.jar" tofile="${artifact.dir}/external/jars/core/common/poi-ooxml-3.13.jar" />
		<copy file="${git.repo}/external/lib/poi-ooxml-schemas-3.13.jar" tofile="${artifact.dir}/external/jars/core/common/poi-ooxml-schemas-3.13.jar" />
		<copy file="${git.repo}/external/lib/stax-api-1.0.1.jar" tofile="${artifact.dir}/external/jars/core/common/stax-api-1.0.1.jar" />
		<copy file="${git.repo}/external/lib/xmlbeans-2.6.0.jar" tofile="${artifact.dir}/external/jars/core/common/xmlbeans-2.6.0.jar" />
		<copy file="${git.repo}/external/lib/ils-common.jar" tofile="${artifact.dir}/external/jars/core/common/ils-common.jar" />
		
		<!-- Icons -->
		<mkdir dir="${artifact.dir}/icons" />
		<copy todir="${artifact.dir}/icons">
			<fileset dir="${svn.repo}/EMRE/Ignition/icons">
				<include name="**/*.png" />
				<include name="**/*.PNG" />
				<include name="**/*.jpg" />
				<include name="**/*.JPG" />
				<include name="**/*.gif" />
				<include name="**/*.GIF" />
			</fileset>
		</copy>

		<!-- Copy license file into the artifacts -->
		<mkdir dir="${artifact.dir}/license" />
		<copy file="${git.repo}/aed/workspace/AED_Build/license.html" todir="${artifact.dir}/license/" />

		<!-- Modules -->
		<mkdir dir="${artifact.dir}/modules" />
		<copy file="${git.repo}/aed/workspace/AED_Build/modules/AED-module-signed.modl" tofile="${artifact.dir}/modules/AED-module-signed.modl" />
		<copy file="${git.repo}/ils-common/CommonModule_Build/modules/CommonModule-module-signed.modl" tofile="${artifact.dir}/modules/CommonModule-module-signed.modl" />

		<!-- Projects -->
		<mkdir dir="${artifact.dir}/projects" />
		<copy file="${svn.repo}/EMRE/Ignition/AED.proj" tofile="${artifact.dir}/projects/AED.proj" />

		<!-- Properties -->
		<mkdir dir="${artifact.dir}/properties" />
		<copy file="${svn.repo}/EMRE/Translations/AED_en.XML" tofile="${artifact.dir}/properties/aed_en.XML" />
		<copy file="${svn.repo}/EMRE/Translations/AED_fr.XML" tofile="${artifact.dir}/properties/aed_fr.XML" />
		<copy file="${svn.repo}/EMRE/Translations/AED_it.XML" tofile="${artifact.dir}/properties/aed_it.XML" />
		<copy file="${svn.repo}/EMRE/Ignition/properties/aed.properties" tofile="${artifact.dir}/properties/aed.properties" />
		<replace file="${artifact.dir}/properties/aed.properties" token="@DATE@"    value="${build.date}" />
		<replace file="${artifact.dir}/properties/aed.properties" token="@RELEASE@" value="${version.build}" />
		
		<!-- logbackfiles -->
		<mkdir dir="${artifact.dir}/logback" />
		<copy file="${git.repo}/ils-common/config/ils_logback.xml.no.sift" tofile="${artifact.dir}/logback/ils_logback.xml.no.sift" />
		<copy file="${git.repo}/ils-common/config/ils_logback.xml.project.sifter" tofile="${artifact.dir}/logback/ils_logback.xml.project.sifter" />
		<copy file="${git.repo}/ils-common/config/ils_logback.xml.project.sifter.db" tofile="${artifact.dir}/logback/ils_logback.xml.project.sifter.db" />
		
		<copy file="${git.repo}/ils-common/config/logback.xml.project.sifter" tofile="${artifact.dir}/logback/logback.xml.project.sifter" />
		<copy file="${git.repo}/ils-common/config/logback_bare_bones.xml" tofile="${artifact.dir}/logback/logback_bare_bones.xml" />
		
		<!-- These are the ones that will become active -->
		<copy file="${git.repo}/ils-common/config/logback.xml.project.sifter" tofile="${artifact.dir}/logback/logback.xml" />
		<copy file="${git.repo}/ils-common/config/ils_logback.xml.project.sifter" tofile="${artifact.dir}/logback/ils_logback.xml" />
		
		<!-- Scanclass -->
		<mkdir dir="${artifact.dir}/scanclasses" />
		<copy file="${svn.repo}/EMRE/Ignition/scanclasses.csv" tofile="${artifact.dir}/scanclasses/scanclasses.csv" />
			
		<!-- Tags -->
		<mkdir dir="${artifact.dir}/tags" />
		<copy file="${svn.repo}/EMRE/Ignition/udts.xml" tofile="${artifact.dir}/tags/UDTs.xml" />
		
		<!-- Test -->
		<!--
		<mkdir dir="${artifact.dir}/test/inputs" />
		<mkdir dir="${artifact.dir}/test/models" />
		<mkdir dir="${artifact.dir}/test/tags" />
		<copy file="${svn.repo}/EMRE/Ignition/simulationData/PCA-data.csv" tofile="${artifact.dir}/test/inputs/PCA-data.csv" />
		<copy file="${svn.repo}/EMRE/Ignition/simulationData/SLED CUB APS TEMP PROFILE.csv" tofile="${artifact.dir}/test/inputs/SLED-data.csv" />
		<copy file="${svn.repo}/EMRE/Ignition/simulationData/SLED CUB APS TEMP FROZEN.csv" tofile="${artifact.dir}/test/inputs/SLED-frozen-data.csv" />
		<copy file="${svn.repo}/EMRE/Install/AEDMemoryTags.xml" tofile="${artifact.dir}/test/tags/memoryTags.xml" />
		<copy file="${svn.repo}/EMRE/Ignition/unittest/AEDModels.xml" tofile="${artifact.dir}/test/models/AEDModelsToImport.xml" />
		<copy file="${svn.repo}/EMRE/Ignition/unittest/AEDTags.xml" tofile="${artifact.dir}/test/models/AEDTagsToImport.xml" />
		<copy file="${svn.repo}/EMRE/Ignition/unittest/SLED2TagModel.xml" tofile="${artifact.dir}/test/models/SLED2TagModel.xml" />
		<copy file="${svn.repo}/EMRE/Ignition/unittest/PCASLEDTags.xml" tofile="${artifact.dir}/test/models/PCASLEDTags.xml" />
		<copy file="${svn.repo}/EMRE/Ignition/unittest/PCASLEDBadTagModels.xml" tofile="${artifact.dir}/test/models/PCASLEDBadTagModels.xml" />
		-->

		<!-- Zip it all up -->
		<zip zipfile="${module.path}/${module.name}-${version.build}-unsigned.modl" basedir="${staging.dir}" />
		
		<!-- Sign the module -->
		<antcall target="SignModule">
			<param name="moduleName" value="${module.name}-${version.build}" />
			<param name="modulein"   value="${module.path}/${module.name}-${version.build}-unsigned.modl" />
			<param name="moduleout"  value="${module.path}/${module.name}-${version.build}-signed.modl" />
		</antcall>
		
	</target>

	<!-- Installs the installer module 
	  1) In the local Ignition gateway. Note that the gateway must be running in developer mode for this to succeed. 
	  2) Onto the shared U: Drive
	 -->
	
	<target name="deploy" depends="build">
		<echo message="Installing ApplicationInstall module on Ignition Gateway and ${installer.repo}." />
		<copy file="${module.path}/${module.name}-${version.build}-signed.modl" tofile="${installer.repo}/${module.name}-${version.build}-signed.modl" />
		<postmodule posturl="${local.gateway.url}" modulefile="${module.path}/${module.name}-${version.build}-signed.modl" />
	</target>

	<!-- macro to trim newlines from a variable -->
		 <macrodef name="trim">
		   <attribute name="input" />
		   <attribute name="property" />
		   <sequential>
		     <tempfile property="temp.file" />
		     <echo file="${temp.file}" message="@{input}" />
		     <move file="${temp.file}" tofile="${temp.file}.2">
		       <filterchain>
		       	   <filterreader classname="org.apache.tools.ant.filters.StripLineBreaks"/>
		       </filterchain>
		     </move>
		     <loadfile property="@{property}" srcFile="${temp.file}.2" />
		     <delete file="${temp.file}.2" failonerror="false" />
		   </sequential>
		 </macrodef>
</project>
