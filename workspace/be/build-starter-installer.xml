<!-- Create an application installer for Batch-Expert+
     
     We require that GIT_REPO and SVN_REPO be provided to this script.
-->
<project name="BatchExpertPlusInstaller" basedir="." default="deploy">
	<property name="build.dir" value="${basedir}/../AI-build" />
	<property name="staging.dir" value="${basedir}/staging" />
	<property name="artifact.dir" value="${staging.dir}/artifacts" />
	<property name="deploy.dir" value="${basedir}/modules" />
	<property name="bom" value="${basedir}/bom-starter.xml" />
	<property name="module.name" value="batch-expert-installer" />
	<property name="module.path" value="${basedir}/modules" />
	<property name="module.xml" value="${basedir}/module-batch-expert.xml" />
	<property name="local.gateway.url" value="http://localhost:8088/main/system/DeveloperModuleLoadingServlet" />

	<!-- Add the postmodule task. This task can deploy a module to a local Ignition gateway. -->
	<taskdef name="postmodule" classname="com.inductiveautomation.ant.PostModule">
		<classpath location="${build.dir}/AntLib/ant-post-module.jar" />
	</taskdef>
	<!-- Generic SignModule: Reference Via Antcalls -->
	<target name="SignModule">
		<echo message="Signing ${moduleName}" />
		<java jar="${git.repo}/external/lib/module-signer.jar"  fork="true">
			<arg value="-keystore=${git.repo}/tools/keys/ILSA-keystore"/>
			<arg value="-keystore-pwd=ILS-Automation"/>
			<arg value="-alias=ILSAutomationKey"/>
			<arg value="-alias-pwd=chromsmart" />
			<arg value="-chain=${git.repo}/tools/keys/ilsautomationcertificate.p7b"/>
			<arg value="-module-in=${modulein}"/>
			<arg value="-module-out=${moduleout}"/>
		</java>
	</target>
	<!-- Clean results of previous runs -->
	<target name="clean" description="Remove existing archive">
		<delete dir="${staging.dir}" />
		<delete file="${module.path}" />
	</target>

	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="clean" description="Assemble the installer">

		<!-- build.date and version.build are both in GIT Release area, in
			files VERS and DATE.
		-->
		<loadfile property="rawdate" srcFile="${svn.repo}/BatchExpert+/Release/DATE"/>
		<trim input="${rawdate}" property="build.date" />
		<loadfile property="rawvers" srcFile="${svn.repo}/BatchExpert+/Release/VERS"/>
		<trim input="${rawvers}" property="version.build"/>

		<echo message="Build date:    ${build.date}" />
		<echo message="Build version: ${version.build}" />

		<!-- Create directories -->
		<echo message="Making ${module.name} modl" />
		<mkdir dir="${staging.dir}" />
		<mkdir dir="${artifact.dir}" />
		<mkdir dir="${deploy.dir}" />

		<!-- Create module.xml, marker file and bill-of-materials -->
		<copy file="${module.xml}" tofile="${staging.dir}/module.xml" overwrite="true" />
		<echo message="${build.date}" file="${staging.dir}/.application-installer" append="false" />

		<!-- Copy Core jar files -->
		<copy file="${git.repo}/external/lib/ils-common.jar" todir="${staging.dir}/" />
		<copy file="${build.dir}/temp_modl/ai-gateway.jar" todir="${staging.dir}/" />

		<!-- Copy staged artifacts into the bundle. Update release and build date -->
		<mkdir dir="${artifact.dir}" />
		<copy file="${bom}" tofile="${artifact.dir}/bom.xml" overwrite="true" />
		<replace file="${artifact.dir}/bom.xml" token="@DATE@" value="${build.date}" />
		<replace file="${artifact.dir}/bom.xml" token="@RELEASE@" value="${version.build}" />

		<!-- License -->
		<mkdir dir="${artifact.dir}/license" />
		<copy file="${git.repo}/batch-expert/license/license.html" tofile="${artifact.dir}/license/license.html" />

		<!-- Database Update Scripts (probably won't need for the base install, but get them in place for updates) -->
		<mkdir dir="${artifact.dir}/database" />
		<mkdir dir="${artifact.dir}/database/sqlServer" />
		<copy todir="${artifact.dir}/database/sqlServer">
			<fileset dir="${svn.repo}/BatchExpert+/Database/sqlServer">
				<include name="*.sql" />
			</fileset>
		</copy>
		<mkdir dir="${artifact.dir}/database/oracle" />
		<copy todir="${artifact.dir}/database/oracle">
			<fileset dir="${svn.repo}/BatchExpert+/Database/oracle">
				<include name="*.sql" />
			</fileset>
		</copy>

		<!-- Icons -->
		<mkdir dir="${artifact.dir}/icons" />
		<copy todir="${artifact.dir}/icons">
		<fileset dir="${git.repo}/batch-expert/images">
			<include name="**/*.gif" />
			<include name="**/*.jpg" />
			<include name="**/*.png" />
		</fileset>
		</copy>

		<!-- Tags -->
		<mkdir dir="${artifact.dir}/tags" />
		<copy file="${svn.repo}/BatchExpert+/Ignition/udts.json" tofile="${artifact.dir}/tags/udts.json" />
		<!--
		<copy file="${git.repo}/batch-expert/tags/udts_new.json" tofile="${artifact.dir}/tags/udts_new.json" />
		<copy file="${git.repo}/batch-expert/tags/configurationTags.json" tofile="${artifact.dir}/tags/configurationTags.json" />
		<copy file="${git.repo}/batch-expert/tags/site_simulation_udts.xml" tofile="${artifact.dir}/tags/simulation_udts.xml" />
		<copy file="${git.repo}/batch-expert/tags/ClientTags.zip" tofile="${artifact.dir}/tags/ClientTags.zip" />
		-->
		

		<!-- External -->
		<mkdir dir="${artifact.dir}/external" />
		<copy todir="${artifact.dir}/external">
			<fileset dir="${git.repo}/batch-expert/BE_Python">
				<include name="ils/**/*.py" />
			</fileset>
		</copy>
		<copy todir="${artifact.dir}/external">
			<fileset dir="${git.repo}/batch-expert/BE_Python">
				<include name="xlsxwriter/**/*.py" />
			</fileset>
		</copy>
		<!--  I forked the jChart code and added under BE - PH 11/15/22
		<mkdir dir="${artifact.dir}/external/ils" />
		<copy todir="${artifact.dir}/external/ils">
			<fileset dir="${git.repo}/ils-python/ILS_Python/src/ils">
				<include name="jChart/*.py" />
			</fileset>
		</copy>
		-->
		<!--  We no longer want to support PY-SFC (which required a Java module) - PH 11/15/22
		<copy todir="${artifact.dir}/external/ils">
			<fileset dir="${git.repo}/py-sfc/pysfc-python/src/ils">
				<include name="pysfc/**/*.py" />
			</fileset>
		</copy>
		-->
		<mkdir dir="${artifact.dir}/external/lib" />
		<copy todir="${artifact.dir}/external/lib">
			<fileset dir="${git.repo}/external/lib">
				<include name="ils-common*" />
			</fileset>
		</copy>
		<delete file="${artifact.dir}/external/lib/ils-common-j7.jar" />

		<!-- Remove examples -->
		<delete dir="${artifact.dir}/external/ils/pysfc/example" />
		<delete dir="${artifact.dir}/external/ils/be/database/customer" />
		<delete>
			<fileset dir="${artifact.dir}/external/ils/pysfc/registration" includes="example*.py" />
			<fileset dir="${artifact.dir}/external/ils/pysfc/registration" includes="simple*.py" />
		</delete>

		<!-- Remove obsolete BatchExpert -->
		<delete dir="${artifact.dir}/external/ils/BatchExpert" />

		<!-- Scanclass -->
		<mkdir dir="${artifact.dir}/taggroups" />
		<copy file="${svn.repo}/BatchExpert+/Ignition/tag-groups.json" tofile="${artifact.dir}/taggroups/taggroups.json" />
		
		<!-- Documentation -->
		<mkdir dir="${artifact.dir}/doc" />
		<copy file="${svn.repo}/BatchExpert+/Documentation/Getting Started/BE+ Getting Started.pdf" tofile="${artifact.dir}/doc/BEGettingStarted.pdf" />
		<copy file="${svn.repo}/BatchExpert+/Release/ReleaseNotes.pdf" tofile="${artifact.dir}/doc/ReleaseNotes.pdf" />
		
		<!-- Project -->
		<mkdir dir="${artifact.dir}/projects" />
		<copy file="${svn.repo}/BatchExpert+/Ignition/BatchExpertSite.zip" tofile="${artifact.dir}/projects/BatchExpertSite.zip" />
		<copy file="${svn.repo}/BatchExpert+/Ignition/BatchExpertMaster.zip" tofile="${artifact.dir}/projects/BatchExpertMaster.zip" />
		<!-- The pysfc module is no longer supported - PH 10/18/11
		<copy file="${git.repo}/py-sfc/projects/PySFC.zip" tofile="${artifact.dir}/projects/PySFC.zip" />
		-->
		
		<!-- Update release and build date in version python file -->
		<copy file="${svn.repo}/BatchExpert+/Release/version.py" tofile="${artifact.dir}/external/ils/be/version.py" overwrite="true" />
		<replace file="${artifact.dir}/external/ils/be/version.py" token="@DATE@" value="${build.date}" />
		<replace file="${artifact.dir}/external/ils/be/version.py" token="@RELEASE@" value="${version.build}" />
		
		<!-- Zip it all up -->
		<zip zipfile="${module.path}/${module.name}-${version.build}-unsigned.modl" basedir="${staging.dir}" />

		<!-- Sign the module -->
		<antcall target="SignModule">
			<param name="moduleName" value="${module.name}-${version.build}" />
			<param name="modulein"   value="${module.path}/${module.name}-${version.build}-unsigned.modl" />
			<param name="moduleout"  value="${module.path}/${module.name}-${version.build}-signed.modl" />
		</antcall>
	</target>

	<!-- Loads the Installer module and sample project to the GoogleDrive. (this does not do an install into the local gateway) -->
	<target name="deploy" depends="build">
		<echo message="Copying ${module.name} to Network Drive ..." />
		<copy file="${module.path}/${module.name}-${version.build}-signed.modl" tofile="${be.install.directory}/${module.name}-${version.build}-signed.modl" />
	</target>

	<!-- macro to trim newlines from a variable -->
	<macrodef name="trim">
		<attribute name="input" />
		<attribute name="property" />
		<sequential>
			<tempfile property="temp.file" />
			<echo file="${temp.file}" message="@{input}" />
			<move file="${temp.file}" tofile="${temp.file}.2">
				<filterchain>
					<filterreader classname="org.apache.tools.ant.filters.StripLineBreaks"/>
				</filterchain>
			</move>
			<loadfile property="@{property}" srcFile="${temp.file}.2" />
			<delete file="${temp.file}.2" failonerror="false" />
		</sequential>
	</macrodef>
</project>
