<!-- Create a demonstration application installer for documentation
     purposes. This file exercizes all panel types.
     
     We require that GIT_REPO and SVN_REPO be provided to this script.
-->
<project name="ApplicationInstaller" basedir="." default="deploy">
	<property name="build.dir" value="${basedir}/../AI-build" />
	<property name="staging.dir" value="${basedir}/staging" />
	<property name="artifact.dir" value="${staging.dir}/artifacts" />
	<property name="deploy.dir" value="${basedir}/modules" />
	<property name="bom" value="${basedir}/bom.xml" />
	<property name="module.name" value="demo-installer" />
	<property name="module.path" value="${basedir}/modules" />
	<property name="module.xml" value="${basedir}/demo-installer-module.xml" />
	<property name="local.gateway.url" value="http://localhost:8088/main/system/DeveloperModuleLoadingServlet" />

	<!-- Add the postmodule task. This task can deploy a module to a local Ignition gateway. -->
	<taskdef name="postmodule" classname="com.inductiveautomation.ant.PostModule">
		<classpath location="${build.dir}/AntLib/ant-post-module.jar" />
	</taskdef>
	<!-- Generic SignModule: Reference Via Antcalls -->
	<target name="SignModule">
		<echo message="Signing ${moduleName}" />
		<java jar="${git.repo}/external/lib/module-signer.jar"  fork="true">
			<arg value="-keystore=${git.repo}/tools/keys/ILSA-keystore"/>
			<arg value="-keystore-pwd=ILS-Automation"/>
			<arg value="-alias=ILSAutomationKey"/>
			<arg value="-alias-pwd=chromsmart" />
			<arg value="-chain=${git.repo}/tools/keys/ilsautomationcertificate.p7b"/>
			<arg value="-module-in=${modulein}"/>
			<arg value="-module-out=${moduleout}"/>
		</java>
	</target>
	<tstamp>
		<format property="build.date" pattern="MM/dd/yyyy HH:mm:ss" />
	</tstamp>

	<!-- Clean results of previous runs -->
	<target name="clean" description="Remove existing archive">
		<delete dir="${staging.dir}" />
		<delete file="${module.path}" />
	</target>

	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="clean" description="Assemble the installer">

		<!-- build.date and version.build are both defined in build.xml 
		    Override them here with file contents in SVN Release area
		    Update the BOM. "loadfile" does not overwrite existing properties.
		-->
		
		<loadfile property="raw" srcFile="${svn.repo}/EMChemicals/Release/VERS"/>
		<trim input="${raw}" property="version.build"/>
		
		<echo message="Build date:    ${build.date}" />
		<echo message="Build version: ${version.build}" />


		<!-- Create directories -->
		<echo message="Making ${module.name} modl" />
		<mkdir dir="${staging.dir}" />
		<mkdir dir="${artifact.dir}" />
		<mkdir dir="${deploy.dir}" />

		<!-- Create module.xml, marker file and bill-of-materials -->
		<copy file="${module.xml}" tofile="${staging.dir}/module.xml" overwrite="true" />
		<echo message="${build.date}" file="${staging.dir}/.application-installer" append="false" />

		<!-- Copy Core jar files -->
		<copy file="${git.repo}/external/lib/ils-common.jar" todir="${staging.dir}/" />
		<copy file="${build.dir}/temp_modl/ai-gateway.jar" todir="${staging.dir}/" />


		<!-- Copy staged artifacts into the bundle. Update release and build date -->
		<mkdir dir="${artifact.dir}" />
		<copy file="${bom}" tofile="${artifact.dir}/bom.xml" overwrite="true" />
		<replace file="${artifact.dir}/bom.xml" token="@DATE@" value="${build.date}" />
		<replace file="${artifact.dir}/bom.xml" token="@RELEASE@" value="${version.build}" />

		<!-- Database -->
		<mkdir dir="${artifact.dir}/database" />
		<copy file="${svn.repo}/EMChemicals/Database/createXOM.sql" tofile="${artifact.dir}/database/createACE.sql" />
		<copy file="${svn.repo}/EMChemicals/Database/clearDatabase.sql" tofile="${artifact.dir}/database/clearDatabase.sql" />

		<!-- External -->
		<mkdir dir="${artifact.dir}/external/ils-python" />
		<copy todir="${artifact.dir}/external/ils-python">
			<fileset dir="${git.repo}/ils-python/ILS_Python/src">
				<include name="ils/**/*.py" />
			</fileset>
		</copy>
		<!-- External -->
		<mkdir dir="${artifact.dir}/external/xom-python" />
		<copy todir="${artifact.dir}/external/xom-python">
			<fileset dir="${git.repo}/xom-python/XOM_Python/src">
				<include name="xom/**/*.py" />
			</fileset>
		</copy>
		<delete dir="${artifact.dir}/external/xom-python/xom/emre" />

		<mkdir dir="${artifact.dir}/external/jars/core/common" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/blt-common.jar" tofile="${artifact.dir}/external/jars/common/blt-common.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/ils-common.jar" tofile="${artifact.dir}/external/jars/common/ils-common.jar" />
		<mkdir dir="${artifact.dir}/external/jars/core/gateway" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/block-definition.jar" tofile="${artifact.dir}/external/jars/gateway/block-definition.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/blt-gateway.jar" tofile="${artifact.dir}/external/jars/gateway/blt-gateway.jar" />

		<!-- Icons -->
		<mkdir dir="${artifact.dir}/icons" />
		<mkdir dir="${artifact.dir}/icons/blt" />
		<copy todir="${artifact.dir}/icons/blt">
			<fileset dir="${git.repo}/blt/images">
				<include name="**/*.png" />
			</fileset>
		</copy>
		<mkdir dir="${artifact.dir}/icons/custom/Custom" />
		<copy todir="${artifact.dir}/icons/custom/Custom">
			<fileset dir="${svn.repo}/EMChemicals/Ignition/icons">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.JPG" />
			</fileset>
		</copy>

		<!-- License -->
		<mkdir dir="${artifact.dir}/license" />
		<copy file="${git.repo}/sfc/workspace/sfc-build/license.html" tofile="${artifact.dir}/license/license.html" />

		<!-- Modules -->
		<mkdir dir="${artifact.dir}/modules" />
		<copy file="${git.repo}/sfc/workspace/sfc-build/modules/ILS-SFC-module-signed.modl" tofile="${artifact.dir}/modules/ILS-SFC-module-signed.modl" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/modules/BLT-module-signed.modl" tofile="${artifact.dir}/modules/BLT-module-signed.modl" />
		<copy file="${git.repo}/tools/test-frame/workspace/TF_Build/modules/TF-module-unsigned.modl" tofile="${artifact.dir}/modules/TF-module-unsigned.modl" />

		<!-- Projects -->
		<mkdir dir="${artifact.dir}/projects" />
		<copy file="${svn.repo}/EMChemicals/Ignition/XOM.proj" tofile="${artifact.dir}/projects/ACE.proj" />
		<copy file="${svn.repo}/EMChemicals/Ignition/DBManager.proj" tofile="${artifact.dir}/projects/DbManager.proj" />
		<mkdir dir="${artifact.dir}/scanclasses" />
		<copy file="${svn.repo}/EMRE/Ignition/scanclasses.csv" tofile="${artifact.dir}/scanclasses/scanclasses.csv" />

		
		<!-- Tags -->
		<mkdir dir="${artifact.dir}/tags" />
		<copy file="${svn.repo}/EMRE/Ignition/udts.xml" tofile="${artifact.dir}/tags/UDTs.xml" />
		<copy file="${git.repo}/blt/regression/basic/config/sqltags.xml" tofile="${artifact.dir}/tags/sqltags.xml" />

		<!-- Zip it all up -->
		<zip zipfile="${module.path}/${module.name}-${version.build}-unsigned.modl" basedir="${staging.dir}" />
		
		<!-- Sign the module -->
		<antcall target="SignModule">
			<param name="moduleName" value="${module.name}-${version.build}" />
			<param name="modulein"   value="${module.path}/${module.name}-${version.build}-unsigned.modl" />
			<param name="moduleout"  value="${module.path}/${module.name}-${version.build}-signed.modl" />
		</antcall>
	</target>

	<!-- Loads the Installer module in local Ignition gateway. Note that the gateway must be running in developer mode for this to succeed. -->
	<target name="deploy" depends="build">
		<echo message="Installing ${module.name} on Ignition Gateway." />
		<postmodule posturl="${local.gateway.url}" modulefile="${module.path}/${module.name}-${version.build}-signed.modl" />
	</target>
	
	<!-- macro to trim newlines from a variable -->
	 <macrodef name="trim">
	   <attribute name="input" />
	   <attribute name="property" />
	   <sequential>
	     <tempfile property="temp.file" />
	     <echo file="${temp.file}" message="@{input}" />
	     <move file="${temp.file}" tofile="${temp.file}.2">
	       <filterchain>
	       	   <filterreader classname="org.apache.tools.ant.filters.StripLineBreaks"/>
	       </filterchain>
	     </move>
	     <loadfile property="@{property}" srcFile="${temp.file}.2" />
	     <delete file="${temp.file}.2" failonerror="false" />
	   </sequential>
	 </macrodef>
</project>
