<!-- Create a sample application installer. Normally this would be created as
     a product of running the Master Builder. We use "Batch Expert+" as our example.
-->
<project name="ApplicationInstallerModule" basedir="../" default="BuildAndInstallModule">

	<import file="${basedir}/mb-build/build.xml"/>

	<property name="version.build" value="0" />	
	<property name="version.beta" value="-development" />		
	<property name="MBModule.version" value="2.0.1.${version.build}" />
	<property name="MBModule.name" value="ApplicationInstaller" />
	<property name="MBModule.release" value="0.1" />
	<property name="MBModule.description" value="Application Installer Master BuilderZZ Module" />
	<property name="jar.dir" value="${git.repo}/external/lib" />
	<property name="deploy.dir" value="${build.dir}/deploy" />
	<property name="ant.build.javac.source" value="1.8"/>
	<property name="ant.build.javac.target" value="1.8"/>
	
	<!-- Common jar classpath -->
	<!-- Both gateway, designer depend on the Common -->
	<path id="AI_Common.classpath">
		<path refid="ignition.classpath" />
		<path refid="external.classpath" />
	</path>
		
	<!-- Gateway jar classpath -->
	<path id="AI_Gateway.classpath">
		<path refid="AI_Common.classpath" />
		<fileset dir="${build.dir}/bin/${MBModule.name}_Common/dist/" includes="*.jar" />
	</path>	

	<!-- Client jar classpath -->
	<path id="AI_Client.classpath">
		<path refid="AI_Common.classpath" />
		<fileset dir="${build.dir}/bin/${MBModule.name}_Common/dist/" includes="*.jar" />
	</path>
	
	
	<!-- This target will build the toolkit module and deploy it to the local Ignition gateway -->
		<target name="BuildAndInstallModule" depends="clean, build, deploy" />

	<!-- Cleans all previously built files (leaves doc) -->
	<target name="clean" description="Remove existing build products" >
		<delete dir="${build.dir}/bin" />
		<delete dir="${build.dir}/release" />
		<delete dir="${build.dir}/temp_modl" />
		<delete dir="${deploy.dir}" />
	</target>	
	
	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="clean" description="Compile the source">
		<echo message="${MBModule.name} ${MBModule.version}" />	
		<delete dir="${build.dir}/temp_modl" />	
		
		<!-- build.date and version.build are both defined in build.xml -->
		<echo message="Build date: ${build.date}" />
		<echo message="Build version: ${version.build}" />	
				
		<!-- AI Common jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${MBModule.name}_Common" />
			<param name="sourceDirFolder" value="mb-common" />
			<param name="jarName" value="mb-common" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="AI_Common.classpath"/>
		</antcall>
		
		
		<!-- AI Gateway jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${MBModule.name}_Gateway" />
			<param name="sourceDirFolder" value="mb-gateway" />
			<param name="jarName" value="mb-gateway" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="AI_Gateway.classpath"/>
		</antcall>

		
		<!-- AI Client jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${MBModule.name}_Client" />
			<param name="sourceDirFolder" value="mb-client" />
			<param name="jarName" value="mb-client" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="AI_Client.classpath"/>
		</antcall>
		
		<!-- AI Designer jar -->
		<antcall target="MakeProject">
			<param name="modName" value="${MBModule.name}_Designer" />
			<param name="sourceDirFolder" value="mb-designer" />
			<param name="jarName" value="mb-designer" />
			<param name="javacSource" value="1.8" />
			<param name="module.build.classpath" value="AI_Client.classpath"/>
		</antcall>
		
		<!-- Create .modl file -->
		<echo message="Making ${MBModule.name} modl" />
		<mkdir dir="${build.dir}/temp_modl" />
		<mkdir dir="${build.dir}/modules" />
		

		<copy file="${build.dir}/application-installer-module.xml" tofile="${build.dir}/temp_modl/module.xml" overwrite="true" />

		<replace file="${build.dir}/temp_modl/module.xml" token="@NAME@" value="${MBModule.name}" />
		<replace file="${build.dir}/temp_modl/module.xml" token="@DESCRIPTION@" value="${MBModule.description}" />
		<replace file="${build.dir}/temp_modl/module.xml" token="@VERSION@" value="${MBModule.version}" />

		<!-- Pack200 and then copy the common, client jars -->
		<pack200 src="${build.dir}/bin/${MBModule.name}_Client/dist/mb-client.jar" destfile="${build.dir}/temp_modl/mb-client.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${build.dir}/bin/${MBModule.name}_Common/dist/mb-common.jar" destfile="${build.dir}/temp_modl/mb-common.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />
		<pack200 src="${build.dir}/bin/${MBModule.name}_Designer/dist/mb-designer.jar" destfile="${build.dir}/temp_modl/mb-designer.jar.pack.gz" gzipoutput="true" configfile="${p200props}" />

		
		<!-- Copy gateway jar -->
		<copy file="${git.repo}/external/lib/ils-common.jar" todir="${build.dir}/temp_modl/" />
		<copy file="${build.dir}/bin/${MBModule.name}_Gateway/dist/mb-gateway.jar" todir="${build.dir}/temp_modl/" />
		<copy file="${build.dir}/bin/${MBModule.name}_Common/dist/mb-common.jar" todir="${build.dir}/temp_modl/" />
		

		<!-- Copy license file and javadoc into the bundle -->
		<mkdir dir="${build.dir}/doc" />
		<copy file="${build.dir}/license.html" todir="${build.dir}/temp_modl/" />
		<copy todir="${build.dir}/temp_modl/doc">
		    <fileset dir="${build.dir}/doc"/>
		</copy>
		<!-- Echo the version into .version in the bundle and to be saved -->
		<echo message="${MBModule.name}-${MBModule.version}:${MBModule.release}" file="${build.dir}/temp_modl/.version" append="false"/>
		<echo message="${MBModule.name}-${MBModule.name}:${MBModule.release}" file="${build.dir}/.version" append="false"/>
		<!-- Create and copy a .application-installer marker into the module -->
		<echo message="${MBModule.name}-${MBModule.version}:${MBModule.release}" file="${build.dir}/temp_modl/.application-installer" append="false"/>
		<echo message="${MBModule.name}-${MBModule.name}:${MBModule.release}" file="${build.dir}/.application-installer" append="false"/>
		
		<!-- Copy the project into the bundle -->
		<mkdir dir="${build.dir}/project" />
		<copy file="${basedir}/../projects/BatchExpertMockInstaller.proj/" tofile="${build.dir}/temp_modl/project/ApplicationInstaller.proj" />
		
		<!-- Zip it all up -->
		<zip zipfile="${build.dir}/modules/${MBModule.name}-module-unsigned.modl" basedir="${build.dir}/temp_modl" />
	</target>
	<!-- Installs TF module in local Ignition gateway. Note that the gateway must be running in developer mode for this to succeed. -->
	<target name="deploy" depends="build" >
		<echo message="Installing ${MBModule.name} on Ignition Gateway." />
		<postmodule posturl="${local.gateway.url}" modulefile="${build.dir}/modules/${MBModule.name}-module-unsigned.modl" />
	</target>	

</project>
