<!-- Create an application installer for the Exxon-Mobil Chemicals
     "Ignition Applications" package. This file assembles artifacts
     to create a specialized installer.
     
     We require that GIT_REPO and SVN_REPO be provided to this script.
-->
<project name="ApplicationInstaller" basedir="." default="deploy">
	<property name="build.dir" value="${basedir}/../AI-build" />
	<property name="staging.dir" value="${basedir}/staging" />
	<property name="artifact.dir" value="${staging.dir}/artifacts" />
	<property name="deploy.dir" value="${basedir}/modules" />
	<property name="bom" value="${basedir}/bom.xml" />
	<property name="module.name" value="emc-installer" />
	<property name="module.path" value="${basedir}/modules" />
	<property name="module.xml" value="${basedir}/emc-installer-module.xml" />
	<property name="local.gateway.url" value="http://localhost:8088/main/system/DeveloperModuleLoadingServlet" />

	<!-- Add the postmodule task. This task can deploy a module to a local Ignition gateway. -->
	<taskdef name="postmodule" classname="com.inductiveautomation.ant.PostModule">
		<classpath location="${build.dir}/AntLib/ant-post-module.jar" />
	</taskdef>

	<!-- Generic SignModule: Reference Via Antcalls -->
	<target name="SignModule">
		<echo message="Signing ${moduleName}" />
		<java jar="${git.repo}/external/lib/module-signer.jar"  fork="true">
			<arg value="-keystore=${git.repo}/tools/keys/ILSA-keystore"/>
			<arg value="-keystore-pwd=ILS-Automation"/>
			<arg value="-alias=ILSAutomationKey"/>
			<arg value="-alias-pwd=chromsmart" />
			<arg value="-chain=${git.repo}/tools/keys/ilsautomationcertificate.p7b"/>
			<arg value="-module-in=${modulein}"/>
			<arg value="-module-out=${moduleout}"/>
		</java>
	</target>
	<!-- Clean results of previous runs -->
	<target name="clean" description="Remove existing archive">
		<delete dir="${staging.dir}" />
		<delete dir="${module.path}" />
	</target>

	<!-- Builds the toolkit module jars and the final .modl file -->
	<target name="build" depends="clean" description="Assemble the installer">

		<!-- build.date and version.build are both in SVN Release area, in
		    files VERS and DATE.
		    Update the BOM. "loadfile" does not overwrite existing properties.
		-->
		<loadfile property="rawdate" srcFile="${svn.repo}/EMChemicals/Release/DATE"/>
		<trim input="${rawdate}" property="build.date" />
		<loadfile property="rawvers" srcFile="${svn.repo}/EMChemicals/Release/VERS"/>
		<trim input="${rawvers}" property="version.build"/>
		<echo message="Build date: ${build.date}" />
		<echo message="Build version: ${version.build}" />


		<!-- Create directories -->
		<echo message="Making ${module.name} modl" />
		<mkdir dir="${staging.dir}" />
		<mkdir dir="${artifact.dir}" />
		<mkdir dir="${deploy.dir}" />

		<!-- Create module.xml and  marker file -->
		<copy file="${module.xml}" tofile="${staging.dir}/module.xml" overwrite="true" />
		<echo message="${build.date}" file="${staging.dir}/.application-installer" append="false" />
		

		<!-- Copy Core jar files -->
		<copy file="${git.repo}/external/lib/ils-common.jar" todir="${staging.dir}/" />
		<copy file="${build.dir}/temp_modl/ai-gateway.jar" todir="${staging.dir}/" />

		<!-- Copy staged artifacts into the bundle. Update release and build date -->
		<mkdir dir="${artifact.dir}" />
		<copy file="${bom}" tofile="${artifact.dir}/bom.xml" overwrite="true" />
		<replace file="${artifact.dir}/bom.xml" token="@DATE@" value="${build.date}" />
		<replace file="${artifact.dir}/bom.xml" token="@RELEASE@" value="${version.build}" />
		
		<!-- Database -->
		<mkdir dir="${artifact.dir}/database" />
		<copy file="${svn.repo}/EMChemicals/Migration/BRPO/createXOM_BRPO.sql" tofile="${artifact.dir}/database/createBRPO.sql" />
		<copy file="${svn.repo}/EMChemicals/Migration/Halobutl/createXOM_Halobutyl.sql" tofile="${artifact.dir}/database/createHalobutyl.sql" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/createXOMvistalon.sql" tofile="${artifact.dir}/database/createVistalon.sql" />
		<copy file="${svn.repo}/EMChemicals/Database/clearDatabase.sql" tofile="${artifact.dir}/database/clearDatabase.sql" />

		<!-- Documentation -->
		<mkdir dir="${artifact.dir}/doc" />
		<copy file="${svn.repo}/EMChemicals/Release/ReleaseNotes.pdf" tofile="${artifact.dir}/doc/ReleaseNotes.pdf" />
		<copy file="${svn.repo}/EMChemicals/Release/ToolchainInstallationManual.docx" tofile="${artifact.dir}/doc/ToolchainInstallationManual.docx" />
		<copy file="${git.repo}/installer/doc/ApplicationInstaller.docx" tofile="${artifact.dir}/doc/ApplicationInstaller.docx" />
		<copy file="${svn.repo}/EMChemicals/Diagnostic Toolkit/Documentation/Design/ApplicationTestFramework.docx" tofile="${artifact.dir}/doc/ApplicationTestFramework.docx" />
		<copy file="${svn.repo}/EMChemicals/Diagnostic Toolkit/Documentation/Design/BlockLanguageToolkitDesign.docx" tofile="${artifact.dir}/doc/BlockLanguageToolkitDesign.docx" />
		<copy file="${svn.repo}/EMChemicals/Diagnostic Toolkit/Documentation/Testing/Diagnostic Toolkit User Interface Test Specification.docx" tofile="${artifact.dir}/doc/DiagnosticToolkitUserInterfaceTestSpec.docx" />
		<copy file="${svn.repo}/EMChemicals/Project Management/BlockTestStatus.xlsx" tofile="${artifact.dir}/doc/BlockDevelopmentScorecard.xslx" />
		<copy file="${svn.repo}/EMChemicals/Recipe Toolkit/Documentation/DBManagerGuide.docx" tofile="${artifact.dir}/doc/DatabaseManagerGuide.docx" />
		<copy file="${svn.repo}/EMChemicals/Database/EMC Database Design.docx" tofile="${artifact.dir}/doc/EMCDatabaseDesign.docx" />
		<copy file="${svn.repo}/EMChemicals/Database/EMC Database ER.pdf" tofile="${artifact.dir}/doc/EMCDatabaseER.pdf" />
		<copy file="${svn.repo}/EMChemicals/Database/EMC Database ER.vsd" tofile="${artifact.dir}/doc/EMCDatabaseERDiagrams.vsd" />
		<copy file="${svn.repo}/EMChemicals/IO Infrastructure/Documentation/Design Specification/IO Design Specification.docx" tofile="${artifact.dir}/doc/IODesignSpecification.docx" />
		<copy file="${svn.repo}/EMChemicals/Lab Data/Design Specification/Lab Data Design Specification.docx" tofile="${artifact.dir}/doc/LabDataDesignSpecification.docx" />
		<copy file="${svn.repo}/EMChemicals/Migration/MigrationManual.docx" tofile="${artifact.dir}/doc/MigrationManual.docx" />
		<copy file="${svn.repo}/EMChemicals/Recipe Toolkit/Documentation/Recipe Design Specification.docx" tofile="${artifact.dir}/doc/RecipeDesignSpecification.docx" />
		<copy file="${svn.repo}/EMChemicals/Sequential Control/Documentation/Guide/ILS_SFC_UserManual.docx" tofile="${artifact.dir}/doc/SequentialControlUserManual.docx" />
		<copy file="${svn.repo}/EMChemicals/Project Management/SFCStepScorecard.xlsx" tofile="${artifact.dir}/doc/SFCDevelopmentScorecard.xslx" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/Documentation/Vistalon Design Specification.docx" tofile="${artifact.dir}/doc/VistalonDesignSpecification.docx" />

		<!-- External -->
		<mkdir dir="${artifact.dir}/external/ils-python" />
		<copy todir="${artifact.dir}/external/ils-python">
			<fileset dir="${git.repo}/ils-python/ILS_Python/src">
				<include name="ils/**/*.py" />
			</fileset>
		</copy>
		<mkdir dir="${artifact.dir}/external/xom-python" />
		<copy todir="${artifact.dir}/external/xom-python">
			<fileset dir="${git.repo}/xom-python/XOM_Python/src">
				<include name="xom/**/*.py" />
			</fileset>
		</copy>
		<delete dir="${artifact.dir}/external/xom-python/xom/emre" />

		<mkdir dir="${artifact.dir}/external/jars" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/blt-common.jar" tofile="${artifact.dir}/external/jars/common/blt-common.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/ils-common.jar" tofile="${artifact.dir}/external/jars/common/ils-common.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/commons-math3-3.1.1.jar.pack.gz" tofile="${artifact.dir}/external/jars/common/commons-math3-3.1.1.jar.pack.gz" />
		<mkdir dir="${artifact.dir}/external/jars/core/gateway" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/block-definition.jar" tofile="${artifact.dir}/external/jars/gateway/block-definition.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/blt-gateway.jar" tofile="${artifact.dir}/external/jars/gateway/blt-gateway.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/jackson-core-2.2.3.jar" tofile="${artifact.dir}/external/jars/gateway/jackson-core-2.2.3.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/jackson-databind-2.2.3.jar" tofile="${artifact.dir}/external/jars/gateway/jackson-databind-2.2.3.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/jackson-annotations-2.2.3.jar" tofile="${artifact.dir}/external/jars/gateway/jackson-annotations-2.2.3.jar" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/temp_modl/commons-math3-3.1.1.jar" tofile="${artifact.dir}/external/jars/gateway/commons-math3-3.1.1.jar" />
		
		<!-- Icons -->
		<mkdir dir="${artifact.dir}/icons" />
		<mkdir dir="${artifact.dir}/icons/blt" />
		<copy todir="${artifact.dir}/icons/blt">
			<fileset dir="${git.repo}/blt/images">
				<include name="**/*.png" />
			</fileset>
		</copy>
		<mkdir dir="${artifact.dir}/icons/custom/Custom" />
		<copy todir="${artifact.dir}/icons/custom/Custom">
			<fileset dir="${svn.repo}/EMChemicals/Ignition/icons">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.JPG" />
			</fileset>
		</copy>
		<!-- Copy license file into the artifacts -->
		<mkdir dir="${artifact.dir}/license" />
		<copy file="${git.repo}/sfc/workspace/sfc-build/license.html" todir="${artifact.dir}/license/" />

		<!-- Modules -->
		<mkdir dir="${artifact.dir}/modules" />
		<copy file="${git.repo}/sfc/SFC-module.modl" tofile="${artifact.dir}/modules/SFC-module.modl" />
		<copy file="${git.repo}/sfc/workspace/sfc-build/modules/ILS-SFC-module-signed.modl" tofile="${artifact.dir}/modules/ILS-SFC-module-signed.modl" />
		<copy file="${git.repo}/blt/workspace/BLT_Build/modules/BLT-module-signed.modl" tofile="${artifact.dir}/modules/BLT-module-signed.modl" />

		<!-- Projects -->
		<mkdir dir="${artifact.dir}/projects/vistalon" />
		<copy file="${svn.repo}/EMChemicals/Release/src/project/BRPO.proj" tofile="${artifact.dir}/projects/BRPO.proj" />
		<copy file="${svn.repo}/EMChemicals/Release/src/project/Halobutyl.proj" tofile="${artifact.dir}/projects/Halobutyl.proj" />
		<copy file="${svn.repo}/EMChemicals/Release/src/project/Vistalon.proj" tofile="${artifact.dir}/projects/Vistalon.proj" />
		<copy file="${svn.repo}/EMChemicals/Ignition/DBManager.proj" tofile="${artifact.dir}/projects/DbManager.proj" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/SFCs/Vetted/driedRegen.proj" tofile="${artifact.dir}/projects/vistalon/DrierRegen.proj" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/SFCs/Vetted/polymerizeEPDM.proj" tofile="${artifact.dir}/projects/vistalon/PolymerizeEPDM.proj" />
		
		<!-- Tags -->
		<mkdir dir="${artifact.dir}/tags/brpo" />
		<mkdir dir="${artifact.dir}/tags/halobutyl" />
		<mkdir dir="${artifact.dir}/tags/vistalon" />
		<copy file="${svn.repo}/EMChemicals/Ignition/XOM UDTs.xml" tofile="${artifact.dir}/tags/UDTs.xml" />
		<copy file="${svn.repo}/EMChemicals/Migration/Halobutl/Imports/sqlTags.xml" tofile="${artifact.dir}/tags/halobutyl/sqlTags.xml" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/Imports/sqlTags.xml" tofile="${artifact.dir}/tags/vistalon/sqlTags.xml" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/Imports/labDataSqlTags.xml" tofile="${artifact.dir}/tags/vistalon/labdataTags.xml" />
		<copy file="${git.repo}/sfc/migration/tags/vistalon/sqlTags.xml" tofile="${artifact.dir}/tags/vistalon/testTags.xml" />
		<copy file="${git.repo}/sfc/migration/tags/vistalon/labdataSqlTags.xml" tofile="${artifact.dir}/tags/vistalon/labdataTestTags.xml" />
		
		<!-- Scanclass -->
		<mkdir dir="${artifact.dir}/scanclasses" />
		<copy file="${svn.repo}/EMChemicals/Migration/Vistalon/Imports/scanclasses.csv" tofile="${artifact.dir}/scanclasses/scanclasses.csv" />

		<!-- Zip it all up -->
		<zip zipfile="${module.path}/${module.name}-${version.build}-unsigned.modl" basedir="${staging.dir}" />
		
		<!-- Sign the module -->
		<antcall target="SignModule">
			<param name="moduleName" value="${module.name}-${version.build}" />
			<param name="modulein"   value="${module.path}/${module.name}-${version.build}-unsigned.modl" />
			<param name="moduleout"  value="${module.path}/${module.name}-${version.build}-signed.modl" />
		</antcall>
	</target>

	<!-- Installs the installer module - this is not part of the default target
	  1) In the local Ignition gateway. Note that the gateway must be running in developer mode for this to succeed. 
	  2) Onto the Google Drive
	 -->
	<target name="deploy" depends="build">
		<echo message="Installing ApplicationInstall module on Ignition Gateway and Google Drive." />
		<copy file="${module.path}/${module.name}-${version.build}-signed.modl" tofile="${google.repo}/${version.build}/${module.name}-${version.build}-signed.modl" />
		<postmodule posturl="${local.gateway.url}" modulefile="${module.path}/${module.name}-${version.build}-signed.modl" />
	</target>

	<!-- macro to trim newlines from a variable -->
		 <macrodef name="trim">
		   <attribute name="input" />
		   <attribute name="property" />
		   <sequential>
		     <tempfile property="temp.file" />
		     <echo file="${temp.file}" message="@{input}" />
		     <move file="${temp.file}" tofile="${temp.file}.2">
		       <filterchain>
		       	   <filterreader classname="org.apache.tools.ant.filters.StripLineBreaks"/>
		       </filterchain>
		     </move>
		     <loadfile property="@{property}" srcFile="${temp.file}.2" />
		     <delete file="${temp.file}.2" failonerror="false" />
		   </sequential>
		 </macrodef>
</project>
